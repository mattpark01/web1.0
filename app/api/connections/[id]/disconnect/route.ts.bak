import { NextRequest, NextResponse } from 'next/server'
import { getAuthUser } from '@/lib/auth'
import { prisma } from '@/lib/prisma'

/**
 * POST /api/connections/[id]/disconnect
 * Disconnect an integration
 */
export async function POST(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const user = await getAuthUser(request)
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    const { id: connectionId } = await context.params
    
    // Verify connection belongs to user
    const connection = await prisma.integration.findFirst({
      where: {
        id: connectionId,
        userId: user.id,
      },
    })
    
    if (!connection) {
      return NextResponse.json(
        { error: 'Connection not found' },
        { status: 404 }
      )
    }
    
    // Delete the connection
    await prisma.integration.delete({
      where: { id: connectionId },
    })
    
    // Also delete any related data
    await prisma.connectionHealth.deleteMany({
      where: { integrationId: connectionId },
    }).catch(() => {}) // Ignore if table doesn't exist
    
    return NextResponse.json({
      success: true,
      message: 'Connection disconnected',
    })
    
  } catch (error) {
    console.error('Failed to disconnect:', error)
    return NextResponse.json(
      { error: 'Failed to disconnect' },
      { status: 500 }
    )
  }
}