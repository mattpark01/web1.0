import { NextRequest, NextResponse } from 'next/server'
import { getAuthUser } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { integrationRegistry } from '@/lib/integrations/core/registry'
import { OAuth2Client } from '@/lib/integrations/core/oauth2-client'
import { decryptToken } from '@/lib/integrations/core/encryption'

/**
 * DELETE /api/integrations/[provider]/disconnect - Disconnect an integration
 * Revokes tokens and removes from database
 */
export async function DELETE(
  request: NextRequest,
  { params }: { params: { provider: string } }
) {
  try {
    const user = await getAuthUser(request)
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    // Get account ID from query params if multiple accounts
    const searchParams = request.nextUrl.searchParams
    const accountId = searchParams.get('accountId')
    
    // Find the integration
    const where = accountId
      ? { userId: user.id, provider: params.provider.toUpperCase().replace('-', '_'), accountId }
      : { userId: user.id, provider: params.provider.toUpperCase().replace('-', '_') }
    
    const integration = await prisma.integration.findFirst({ where })
    
    if (!integration) {
      return NextResponse.json({ error: 'Integration not found' }, { status: 404 })
    }
    
    // Try to revoke tokens at provider (best effort)
    try {
      const provider = integrationRegistry.getProvider(params.provider)
      if (provider?.auth.type === 'oauth2') {
        const oauth2Config = { ...provider.auth.config } as any
        oauth2Config.clientId = process.env[`${params.provider.toUpperCase().replace('-', '_')}_CLIENT_ID`]
        oauth2Config.clientSecret = process.env[`${params.provider.toUpperCase().replace('-', '_')}_CLIENT_SECRET`]
        
        const oauth2Client = new OAuth2Client(oauth2Config)
        
        // Revoke access token
        if (integration.accessToken) {
          const accessToken = decryptToken(integration.accessToken)
          await oauth2Client.revokeToken(accessToken, 'access_token')
        }
        
        // Revoke refresh token
        if (integration.refreshToken) {
          const refreshToken = decryptToken(integration.refreshToken)
          await oauth2Client.revokeToken(refreshToken, 'refresh_token')
        }
      }
    } catch (revokeError) {
      console.error('Token revocation failed (non-fatal):', revokeError)
      // Continue with deletion even if revocation fails
    }
    
    // Delete from database
    await prisma.integration.delete({
      where: { id: integration.id }
    })
    
    return NextResponse.json({
      success: true,
      message: 'Integration disconnected successfully'
    })
    
  } catch (error) {
    console.error('Disconnect integration error:', error)
    return NextResponse.json(
      { error: 'Failed to disconnect integration' },
      { status: 500 }
    )
  }
}

/**
 * POST /api/integrations/[provider]/disconnect - Soft disconnect
 * Marks integration as inactive without deleting
 */
export async function POST(
  request: NextRequest,
  { params }: { params: { provider: string } }
) {
  try {
    const user = await getAuthUser(request)
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    const searchParams = request.nextUrl.searchParams
    const accountId = searchParams.get('accountId')
    
    const where = accountId
      ? { userId: user.id, provider: params.provider.toUpperCase().replace('-', '_'), accountId }
      : { userId: user.id, provider: params.provider.toUpperCase().replace('-', '_') }
    
    const integration = await prisma.integration.update({
      where: { id: (await prisma.integration.findFirst({ where }))?.id },
      data: {
        status: 'REVOKED',
        syncEnabled: false,
        updatedAt: new Date()
      }
    })
    
    return NextResponse.json({
      success: true,
      message: 'Integration disabled',
      integration: {
        id: integration.id,
        provider: integration.provider,
        status: integration.status
      }
    })
    
  } catch (error) {
    console.error('Disable integration error:', error)
    return NextResponse.json(
      { error: 'Failed to disable integration' },
      { status: 500 }
    )
  }
}